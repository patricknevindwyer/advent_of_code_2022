# Day 15

## Data

```elixir
data = "#{__DIR__}/data/day15/part01.dat" |> File.read!()
```

```elixir
defmodule SensorMesh do
  def parse(raw) do
    raw
    |> String.split("\n")
    |> Enum.map(&parse_sensor/1)
    |> Enum.map(&precompute/1)
  end

  defp parse_sensor(sensor) do
    [sensor_loc, beacon_loc] =
      sensor
      |> String.split(": ")
      |> Enum.map(&parse_pair/1)

    %{beacon: beacon_loc, sensor: sensor_loc}
  end

  defp parse_pair(fragment) do
    [x, y] =
      fragment
      |> String.split(", ")
      |> Enum.map(fn piece ->
        piece
        |> String.split("=")
        |> Enum.drop(1)
        |> List.first()
        |> String.to_integer()
      end)

    {x, y}
  end

  defp precompute(%{beacon: {b_x, b_y}, sensor: {s_x, s_y}} = sensor) do
    # distance function
    sensor |> Map.put(:distance, abs(b_x - s_x) + abs(b_y - s_y))
  end

  def excluded_count_at_row(sensors, row) do
    # walk each sensor and determine the spots that cannot be on that row
    covered_ranges = covered_ranges(sensors, row)

    # now figure out how many things we need to _remove_ from coverage
    # on this row
    filled =
      sensors
      |> Enum.map(fn %{sensor: {s_x, s_y}, beacon: {b_x, b_y}} ->
        [{s_x, s_y}, {b_x, b_y}]
      end)
      |> List.flatten()
      |> Enum.sort()
      |> Enum.uniq()
      |> Enum.map(fn {x, y} ->
        in_ranges(covered_ranges, row, {x, y})
      end)
      |> Enum.sum()

    covered_ranges
    |> Enum.map(&Range.size/1)
    |> Enum.sum()
    |> Kernel.-(filled)
  end

  def triangulate(sensors, max_range \\ 20) do
    # collect sensor covered ranges per row
    tri_y =
      0..max_range
      |> Enum.find_index(fn row ->
        # Make some ranges
        covered_ranges = covered_ranges(sensors, row)

        # determine if a gap exists in the row
        gap_in_range?(covered_ranges, {0, max_range})
      end)

    tri_x = sensors |> covered_ranges(tri_y) |> gap_in_range({0, max_range})

    {tri_x, tri_y}
  end

  defp gap_in_range?(ranges, check_range) do
    gap_in_range(ranges, check_range) != :empty
  end

  defp gap_in_range(ranges, {start, finish}) do
    case remove_from_range(ranges, {start, finish}) do
      :empty -> :empty
      {s, _f} -> s
    end
  end

  defp remove_from_range(_any, nil), do: :empty
  defp remove_from_range([], {start, finish}), do: {start, finish}

  defp remove_from_range([range | ranges], {start, finish}) do
    r_s = range.first
    r_f = range.last

    cond do
      r_f < start -> remove_from_range(ranges, {start, finish})
      r_s > finish -> remove_from_range(ranges, {start, finish})
      r_s <= start && r_f >= finish -> :empty
      r_s < start && r_f < finish -> remove_from_range(ranges, {r_f + 1, finish})
      r_s > start && r_f > finish -> remove_from_range(ranges, {start, r_s - 1})
    end
  end

  defp covered_ranges(sensors, row) do
    sensors
    |> Enum.map(fn sensor ->
      cells_in_row(sensor, row)
    end)

    # remove non-ranges
    |> Enum.reject(fn v -> v == 0 end)

    # sort by starting point
    |> Enum.sort_by(fn {s_x, _e_x} -> s_x end)

    # convert to ranges and reduce until overlaps are gone
    |> Enum.map(fn {s_x, e_x} -> Range.new(s_x, e_x) end)
    |> reduced_ranges([])
  end

  defp in_ranges(ranges, row, {x, y}) do
    if y != row do
      0
    else
      ranges
      |> Enum.map(fn range ->
        if range.first <= x && range.last >= x do
          1
        else
          0
        end
      end)
      |> Enum.sum()
    end
  end

  defp reduced_ranges([], acc), do: acc
  defp reduced_ranges([a], acc), do: acc ++ [a]

  defp reduced_ranges([a, b | rest], acc) do
    if Range.disjoint?(a, b) do
      reduced_ranges([b] ++ rest, acc ++ [a])
    else
      n_s = min(a.first, b.first)
      n_e = max(a.last, b.last)
      reduced_ranges([Range.new(n_s, n_e)] ++ rest, acc)
    end
  end

  defp cells_in_row(%{sensor: {s_x, s_y}, distance: dist}, row) do
    if s_y - dist > row || s_y + dist < row do
      0
    else
      # calculate the cells that _could_ be in the row, return as
      # a range
      vert = abs(s_y - row)
      remaining = dist - vert
      {s_x - remaining, s_x + remaining}
    end
  end
end
```

## Part 01

```elixir
data
|> SensorMesh.parse()
|> SensorMesh.excluded_count_at_row(2_000_000)
```

## Part 02

```elixir
{distress_x, distress_y} =
  data
  |> SensorMesh.parse()
  |> SensorMesh.triangulate(4_000_000)

distress_x * 4_000_000 + distress_y
```
