# Day 17

## Data

```elixir
data = "#{__DIR__}/data/day17/part01.dat" |> File.read!()
```

After a few hours of a partially working solution that was growing wildly out of hand, I reviewed a solution from [flwyd](https://raw.githubusercontent.com/flwyd/adventofcode/main/2022/day17/day17.exs) which used a very similar approach, but _actually_ worked.

Restructured while reviewing so it made sense as I walked through it.

The biggest mistake I made in my initial approach was a weird combination of partially overlapping piece data and stack data, with mis-matched indices for the piece versus the board. This made it difficult to debug why the `+` shape, in particular, wouldn't land correctly. That approach was nearly identical in implementation to `flwyd`'s approach of a recursive/reduce.

Part 2 with the original implementation would have been straightforward for cycle checking, as it persisted a binary array for each row that could be used as part of the set index for cache checks.

ü§∑üèΩ‚Äç‚ôÄÔ∏è

```elixir
defmodule Jets do
  defstruct jets: "", idx: 0, len: 0

  def new(line), do: %Jets{jets: line, len: String.length(line)}

  def next(%Jets{jets: l, idx: i, len: r} = jets) do
    move =
      case String.at(l, i) do
        "<" -> {-1, 0}
        ">" -> {1, 0}
      end

    {
      struct!(
        jets,
        idx: rem(i + 1, r)
      ),
      move
    }
  end
end
```

```elixir
defmodule Rocktris do
  @rock_shapes [
    # horizontal line: _
    [{2, -4}, {3, -4}, {4, -4}, {5, -4}],
    # plus: +
    [{3, -4}, {2, -5}, {3, -5}, {4, -5}, {3, -6}],
    # corner: J
    [{2, -4}, {3, -4}, {4, -4}, {4, -5}, {4, -6}],
    # vertical line: |
    [{2, -4}, {2, -5}, {2, -6}, {2, -7}],
    # square: #
    [{2, -4}, {3, -4}, {2, -5}, {3, -5}]
  ]
  @num_rocks 5

  def play(input, rounds \\ 2022) do
    rocks = Enum.take(Stream.cycle(@rock_shapes), rounds)

    {height, _stack, _jets} =
      Enum.reduce(rocks, {0, [], Jets.new(input)}, fn rock, {height, stack, jets} ->
        drop_rock(rock, height, stack, jets)
      end)

    height
  end

  def play_with_cycle(input, big_num \\ 1_000_000_000_000) do
    rocks = Stream.cycle(@rock_shapes)
    jets = Jets.new(input)
    cache = :ets.new(:cache, [:set])

    {height, _stack, _jets, _i} =
      Enum.reduce_while(rocks, {0, [], jets, 0}, fn rock, {height, stack, jets, i} ->
        if i == big_num do
          {:halt, {height, stack, jets, i}}
        else
          key = {rem(i, @num_rocks), jets.idx, Enum.take(stack, 8)}

          {full_height, iter} =
            if big_num - i <= String.length(jets.jets) do
              {height, i}
            else
              case :ets.lookup(cache, key) do
                [] ->
                  true = :ets.insert_new(cache, {key, {i, height}})
                  {height, i}

                [{_, {prev_i, prev_height}}] ->
                  with gap <- i - prev_i, chunk_height = height - prev_height do
                    factor = div(big_num - i, gap)
                    new_i = i + gap * factor
                    new_height = height + chunk_height * factor
                    {new_height, new_i}
                  end
              end
            end

          {:cont, Tuple.append(drop_rock(rock, full_height, stack, jets), iter + 1)}
        end
      end)

    :ets.delete(cache)
    height
  end

  @down {0, 1}
  defp drop_rock(rock, height, stack, jets) do
    {moved, jets} =
      Enum.reduce_while(Stream.cycle([nil]), {rock, jets}, fn nil, {rock, jets} ->
        {jets, move} = Jets.next(jets)
        shifted = move(rock, move)
        r = if allowed?(shifted, height, stack), do: shifted, else: rock
        down = move(r, @down)
        if allowed?(down, height, stack), do: {:cont, {down, jets}}, else: {:halt, {r, jets}}
      end)

    {height, stack} = place_rock(moved, height, stack)
    {height, stack, jets}
  end

  defp move(rock, {dx, dy}), do: Enum.map(rock, fn {x, y} -> {x + dx, y + dy} end)

  defp allowed?(rock, height, stack) do
    !Enum.any?(rock, fn {x, y} -> x < 0 || x >= 7 || y >= height end) &&
      Enum.all?(rock, fn {x, y} -> y < 0 || Enum.at(stack, y) |> Enum.at(x) == :clear end)
  end

  defp place_rock(rock, height, stack) do
    get_y = &elem(&1, 1)
    min_y = Enum.map(rock, get_y) |> Enum.min()
    min_y_or_zero = min(min_y, 0)
    new_rows = List.duplicate(List.duplicate(:clear, 7), -1 * min_y_or_zero)

    new_stack =
      Enum.reduce(rock, new_rows ++ stack, fn {x, y}, st ->
        List.update_at(st, y - min_y_or_zero, fn list -> List.replace_at(list, x, :blocked) end)
      end)

    {height - min_y_or_zero, new_stack}
  end
end
```

## Part 01

```elixir
Rocktris.play(data)
```

## Part 02

```elixir
Rocktris.play_with_cycle(data)
```
