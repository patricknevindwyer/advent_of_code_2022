# Day 19

## Data

```elixir
data = "#{__DIR__}/data/day19/part01.dat" |> File.read!()
```

```elixir
defmodule Blueprints do
  def parse(raw) do
    raw
    |> String.split("\n")
    |> Enum.map(&parse_blueprint/1)
  end

  defp parse_blueprint("Blueprint " <> print) do
    [id, ingredients] =
      print
      |> String.split(": ")

    {id |> String.to_integer(), ingredients |> parse_ingredients()}
  end

  defp parse_ingredients(raw) do
    raw
    |> String.split(".", trim: true)
    |> Enum.map(&String.trim/1)
    |> Enum.map(&parse_ingredient/1)
    |> Map.new()
  end

  defp parse_ingredient("Each " <> dirs) do
    [robot, parts] =
      dirs
      |> String.split(" costs ")

    [robot_type, _] = robot |> String.split(" ")

    r_parts =
      parts
      |> String.split(" and ")
      |> Enum.map(&parse_part/1)

    {
      robot_type |> String.to_atom(),
      r_parts |> Map.new() |> Enum.into(default_parts())
    }
  end

  defp parse_part(raw) do
    [count, part] = raw |> String.split(" ")

    {
      part |> String.to_atom(),
      count |> String.to_integer()
    }
  end

  defp default_parts do
    %{ore: 0, clay: 0, obsidian: 0}
  end
end
```

```elixir
defmodule Factory do
  def first_available(id, blueprint, time \\ 24) when is_map(blueprint) do
    # setup our cache
    cache = :ets.new(String.to_atom("cache_#{id}"), [:set])

    res =
      build(
        [:ore],
        [],
        default_resources(),
        blueprint,
        cache,
        time
      )

    # cleanup
    :ets.delete(cache)
    res
  end

  defp build(r, _b, resources, _bp, _cache, 0), do: {r, resources}

  defp build(robots, built, resources, blueprints, cache, step) do
    # check our cache
    key = {robots |> Enum.frequencies(), built, resources, step}

    case :ets.lookup(cache, key) do
      [{_, cached}] ->
        cached

      [] ->
        # lots of redundant filtering going on, but 🤷🏼‍♀️
        #  - functionally BFS with cache over {current bots, next bot, resources, time}
        #  - always build a Geode or Obsidian if we can
        #  - Don't build something if we already produce as much as we need
        #  - otherwise start with a nop/none build and iterate

        # all robots collect resources
        updated_resources = collect_resources(resources, robots)

        # iterate through possible builds based on resources
        possibilities =
          [:geode, :obsidian, :clay, :ore]
          |> Enum.filter(fn to_build ->
            build_available?(updated_resources, blueprints, to_build)
          end)

        # check what's available
        build_possibilities =
          cond do
            build_available?(updated_resources, blueprints, :geode) ->
              [:geode]

            build_available?(updated_resources, blueprints, :obsidian) ->
              [:obsidian]

            true ->
              [:none] ++ possibilities
          end

        # If production for a type is already > than max cost for a type,
        # then remove
        max_costs = max_costs(blueprints)
        prod = current_production(robots)

        # walk through our builds
        best =
          build_possibilities
          |> Enum.reject(fn bot ->
            case bot do
              :none ->
                false

              :clay ->
                # what does an obsidian cost?
                Map.get(prod, :clay, 0) >= blueprints |> Map.get(:obsidian) |> Map.get(:clay)

              :ore ->
                # are we already producing enough?
                Map.get(prod, :ore, 0) >= Map.get(max_costs, :ore, 10000)

              _other ->
                # always build if we can
                false
            end
          end)

          # eh. This doesn't do much, but I don't want to re-run
          |> Enum.take(3)
          |> Enum.map(fn to_build ->
            build(
              robots ++ built,
              [to_build] |> Enum.reject(fn v -> v == :none end),
              updated_resources |> minus_cost(blueprints, to_build),
              blueprints,
              cache,
              step - 1
            )
          end)
          |> Enum.sort_by(fn {_robots, %{geode: g}} -> g end)
          |> Enum.reverse()
          |> List.first()

        :ets.insert(cache, {key, best})
        best
    end
  end

  defp current_production(bots), do: Enum.frequencies(bots)

  defp max_costs(blueprints) do
    blueprints
    |> Map.values()
    |> Enum.map(&Map.to_list/1)
    |> List.flatten()
    |> Enum.group_by(fn {t, _c} -> t end, fn {_t, c} -> c end)
    |> Enum.map(fn {t, cs} -> {t, Enum.max(cs)} end)
    |> Map.new()
  end

  defp collect_resources(current, robots) do
    new_resources =
      robots
      |> Enum.frequencies()

    current
    |> Enum.map(fn {resource, quant} ->
      {resource, quant + Map.get(new_resources, resource, 0)}
    end)
    |> Map.new()
  end

  defp minus_cost(resources, _b, :none), do: resources

  defp minus_cost(resources, blueprints, robot) do
    bp = blueprints |> Map.get(robot)

    resources
    |> Enum.map(fn {r, qua} ->
      {
        r,
        qua - Map.get(bp, r, 0)
      }
    end)
    |> Map.new()
  end

  defp build_available?(resources, blueprints, robot) do
    blueprints
    |> Map.get(robot)
    |> Enum.map(fn {res, qua} ->
      resources |> Map.get(res) |> Kernel.>=(qua)
    end)
    |> Enum.all?()
  end

  defp default_resources do
    %{ore: 0, clay: 0, obsidian: 0, geode: 0}
  end
end
```

## Part 01

```elixir
data
|> Blueprints.parse()
|> Enum.map(fn {b_id, blueprint} ->
  {_bots, %{geode: g}} = Factory.first_available(b_id, blueprint) |> IO.inspect()
  b_id * g
end)
|> Enum.sum()
```

## Section

```elixir
data
|> Blueprints.parse()
|> Enum.take(3)
|> Enum.map(fn {b_id, blueprint} ->
  {_bots, %{geode: g}} = Factory.first_available(b_id, blueprint, 32) |> IO.inspect()
  g
end)
|> Enum.reduce(1, fn a, b -> a * b end)
```
